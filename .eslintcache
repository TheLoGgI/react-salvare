[{"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx":"1","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx":"2","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx":"3","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx":"4","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx":"5","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\ingredient.tsx":"6","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\recipes.tsx":"7","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx":"8","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts":"9","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx":"10","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx":"11","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx":"12","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx":"13","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx":"14","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx":"15","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx":"16"},{"size":1624,"mtime":1642286380185,"results":"17","hashOfConfig":"18"},{"size":4921,"mtime":1642203122806,"results":"19","hashOfConfig":"18"},{"size":433,"mtime":1640119400000,"results":"20","hashOfConfig":"18"},{"size":2281,"mtime":1642200090897,"results":"21","hashOfConfig":"18"},{"size":1920,"mtime":1642899643642,"results":"22","hashOfConfig":"18"},{"size":2007,"mtime":1641164231066,"results":"23","hashOfConfig":"18"},{"size":14198,"mtime":1642204913064,"results":"24","hashOfConfig":"18"},{"size":991,"mtime":1641163674284,"results":"25","hashOfConfig":"18"},{"size":2375,"mtime":1641226849929,"results":"26","hashOfConfig":"18"},{"size":4084,"mtime":1641145135251,"results":"27","hashOfConfig":"18"},{"size":778,"mtime":1641073130515,"results":"28","hashOfConfig":"18"},{"size":558,"mtime":1642037679206,"results":"29","hashOfConfig":"18"},{"size":1750,"mtime":1642462461710,"results":"30","hashOfConfig":"18"},{"size":13010,"mtime":1642899635234,"results":"31","hashOfConfig":"18"},{"size":1458,"mtime":1642463186141,"results":"32","hashOfConfig":"33"},{"size":1322,"mtime":1642894077618,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"qd1rg2",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"nmj2ys",{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx",[],["70","71"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx",["72"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\ingredient.tsx",["73","74"],"import { Box, Heading, List, Text } from \"@chakra-ui/react\"\r\nimport { useContext, useEffect } from \"react\"\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\n\r\nimport { MetricListItem } from \"../components/MetricListItem\"\r\nimport { FoodDataContext } from \"../context/DataContext\"\r\nimport { FoodDataHintsType } from \"../types/ingredients\"\r\n\r\nfunction Ingredients() {\r\n    const { id } = useParams()\r\n    // const navigate = useNavigate()\r\n    const ingredientData = useContext<Array<FoodDataHintsType>>(FoodDataContext)\r\n\r\n    // useEffect(() => {\r\n    //     if (ingredientData === null || ingredientData.length === 0) {\r\n    //         navigate(\"/\")\r\n    //     }\r\n    // }, [ingredientData, navigate])\r\n\r\n    const currentIngredient = ingredientData?.find(\r\n        (ingredient) => ingredient.food.foodId === id\r\n    )\r\n\r\n    const label = currentIngredient?.food.label\r\n    const energi = currentIngredient?.food.nutrients.ENERC_KCAL\r\n    const protein = currentIngredient?.food.nutrients.PROCNT\r\n    const fat = currentIngredient?.food.nutrients.FAT\r\n    const fibers = currentIngredient?.food.nutrients.FIBTG\r\n    const carbohydrate = currentIngredient?.food.nutrients.CHOCDF\r\n\r\n    return (\r\n        <Box as=\"main\" bg=\"#1A2C33\" p=\"4\">\r\n            <Heading color=\"blue.50\">{label}</Heading>\r\n\r\n            <Text color=\"blue.50\" my=\"5\" fontWeight=\"bold\">\r\n                Per 100 g\r\n            </Text>\r\n            <List color=\"blue.50\" maxW=\"60\">\r\n                <MetricListItem type=\"Energi\" metric={energi} unit=\"kcal\" />\r\n                <MetricListItem type=\"Protein\" metric={protein} unit=\"g\" />\r\n                <MetricListItem type=\"Fat\" metric={fat} unit=\"g\" />\r\n                <MetricListItem type=\"Fibers\" metric={fibers} unit=\"g\" />\r\n                <MetricListItem\r\n                    type=\"Carbohydrate\"\r\n                    metric={carbohydrate}\r\n                    unit=\"g\"\r\n                />\r\n            </List>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Ingredients\r\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\recipes.tsx",["75"],"import {\n    Box,\n    Flex,\n    Grid,\n    GridItem,\n    HStack,\n    Heading,\n    IconButton,\n    Image,\n    List,\n    ListItem,\n    OrderedList,\n    Select,\n    Text,\n    UnorderedList,\n} from \"@chakra-ui/react\"\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\"\nimport {\n    faConciergeBell,\n    faFireAlt,\n    faPrint,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { capitalize } from \"lodash\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\n\nimport { MetricListItem } from \"../components/MetricListItem\"\nimport { RecipesDataContext } from \"../context/DataContext\"\nimport {\n    RecipesData,\n    RecipesImages,\n    RecipiesIngredients,\n} from \"../types/recipes\"\n\ntype ingredientsListType = (RecipiesIngredients & { selected: boolean })[]\n\nexport default function Recipies() {\n    const { id } = useParams()\n    const navigate = useNavigate()\n    const recipesData = useContext<RecipesData>(RecipesDataContext)\n    console.log(\"recipesData: \", recipesData)\n    const [recipeAmount, setRecipeAmount] = useState(1)\n    const [ingredientsList, setIngredientsList] = useState<ingredientsListType>(\n        []\n    )\n\n    const updateSelectedState = (newState: boolean, index: number) => {\n        const t = [...ingredientsList]\n        t[index].selected = newState\n        setIngredientsList(t)\n    }\n\n    useEffect(() => {\n        if (recipesData === null || JSON.stringify(recipesData) === \"{}\") {\n            navigate(\"/\")\n        }\n    }, [recipesData, navigate])\n\n    const currentIngredient = recipesData.hits?.find(\n        (hit) => hit.recipe.id === id\n    )\n    console.log(\"currentIngredient: \", currentIngredient)\n\n    useEffect(() => {\n        if (currentIngredient === undefined) {\n            navigate(\"/\")\n        }\n    }, [currentIngredient, navigate])\n\n    useEffect(() => {\n        if (currentIngredient !== undefined) {\n            setIngredientsList(\n                currentIngredient?.recipe.ingredients.map((item) => {\n                    return { ...item, selected: false }\n                })\n            )\n        }\n    }, [currentIngredient, currentIngredient?.recipe.ingredients])\n\n    if (currentIngredient === undefined) return <></>\n\n    const totalNutrients = Object.values(\n        currentIngredient?.recipe.totalNutrients\n    ).filter((item) => item.quantity !== 0)\n\n    const macroAcides = [\"Fat\", \"Energy\", \"Carbs\", \"Fiber\", \"Protein\"]\n    const primaryNutrients = totalNutrients.filter((item, index) =>\n        macroAcides.includes(item.label)\n    )\n    const filteredNutrients = totalNutrients\n        .filter((item) => !macroAcides.includes(item.label))\n        .sort((a, b) => {\n            if (a.unit === \"g\") return -1\n\n            if (a.unit === b.unit) {\n                return b.quantity - a.quantity\n            }\n\n            if (\n                (a.unit === \"g\" && b.unit !== a.unit) ||\n                (a.unit === \"mg\" && b.unit !== a.unit)\n            ) {\n                return -1\n            } else return 1\n        })\n\n    const label = currentIngredient.recipe.label\n\n    const pickLargesImage = (images: RecipesImages) => {\n        if (images === undefined) return \"placeholder.png\"\n        const imagesArray = Object.values(images)\n        // @ts-ignore\n        const sorted = imagesArray.sort((a, b) => b.width - a.width)\n        // @ts-ignore\n        return sorted[0].url\n    }\n\n    function NutritionGridItem(index: number, subarray: typeof totalNutrients) {\n        return (\n            <GridItem key={index}>\n                <List color=\"blue.50\">\n                    {subarray.map((nutrient, index) => (\n                        <MetricListItem\n                            key={index + nutrient.label}\n                            type={nutrient.label}\n                            metric={nutrient.quantity}\n                            unit={nutrient.unit}\n                        />\n                    ))}\n                </List>\n            </GridItem>\n        )\n    }\n\n    function SplitNutritionGrid(\n        nutrietnsArray: typeof totalNutrients,\n        numberOfSplits: number\n    ) {\n        const ListItemAmount = Math.floor(\n            nutrietnsArray.length / numberOfSplits\n        )\n\n        const subArrys = new Array(numberOfSplits)\n            .fill(1)\n            .map((item, index) =>\n                nutrietnsArray.slice(\n                    index * ListItemAmount,\n                    (index + 1) * ListItemAmount\n                )\n            )\n\n        return subArrys.map((nutrient, index, array) => (\n            <GridItem key={index}>\n                <List color=\"blue.50\">\n                    {NutritionGridItem(index, nutrient)}\n                </List>\n            </GridItem>\n        ))\n    }\n\n    return (\n        <Box as=\"main\" bg=\"#1A2C33\" p=\"4\" pb=\"200\" mt=\"10\">\n            <Flex\n                maxW={1600}\n                mx=\"auto\"\n                alignItems=\"start\"\n                justify=\"space-between\"\n                w=\"100%\"\n                gap=\"20\"\n            >\n                <Box width=\"70%\">\n                    <Flex justify=\"space-between\">\n                        <Heading color=\"blue.50\">{label}</Heading>\n                        <IconButton\n                            // colorScheme=\"teal\"\n                            bg=\"#335563\"\n                            aria-label=\"Print\"\n                            size=\"lg\"\n                            title=\"Print\"\n                            isRound\n                            _hover={{ bg: \"teal\" }}\n                            icon={\n                                <FontAwesomeIcon\n                                    color=\"#1A2C33\"\n                                    icon={faPrint}\n                                />\n                            }\n                            onClick={() => {\n                                window.print()\n                            }}\n                        />\n                    </Flex>\n                    <HStack spacing={6} mt=\"5\">\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faClock}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {currentIngredient.recipe.totalTime} min\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faFireAlt}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {Math.round(currentIngredient.recipe.calories)}{\" \"}\n                                cal\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faConciergeBell}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {currentIngredient.recipe.yield} Portions\n                            </Text>\n                        </HStack>\n                    </HStack>\n                    <Flex justify=\"end\">\n                        <Select\n                            placeholder=\"Select option\"\n                            w=\"200\"\n                            bg=\"#26404A\"\n                            border=\"none\"\n                            color=\"white\"\n                            colorScheme=\"teal\"\n                            onChange={(e) => {\n                                setRecipeAmount(Number(e.target.value))\n                            }}\n                        >\n                            <option selected value=\"1\">\n                                Person 1\n                            </option>\n                            <option value=\"2\">Person 2</option>\n                            <option value=\"3\">Person 3</option>\n                            <option value=\"4\">Person 4</option>\n                            <option value=\"5\">Person 5</option>\n                            <option value=\"6\">Person 6</option>\n                            <option value=\"7\">Person 7</option>\n                            <option value=\"8\">Person 8</option>\n                        </Select>\n                    </Flex>\n                    <Box>\n                        {ingredientsList?.map((ingredient, index) => {\n                            const quantity =\n                                ingredient.quantity === 0\n                                    ? Number(ingredient.weight.toFixed(2))\n                                    : Number(ingredient.quantity.toFixed(2))\n                            console.log(\n                                \"ingredient.measure : \",\n                                ingredient.measure\n                            )\n                            const unit =\n                                ingredient.measure === \"<unit>\"\n                                    ? \"\"\n                                    : ingredient.quantity === 0\n                                    ? \"g\"\n                                    : ingredient.measure\n\n                            const IngredientSum = recipeAmount * quantity\n\n                            return (\n                                <Grid\n                                    bg={\n                                        ingredient.selected\n                                            ? \"#00506f\"\n                                            : \"#26404A\"\n                                    }\n                                    color=\"white\"\n                                    p=\"4\"\n                                    templateColumns=\"10% 1fr 20%\"\n                                    alignItems=\"center\"\n                                    w=\"100%\"\n                                    minW=\"600\"\n                                    borderRadius={4}\n                                    my=\"4\"\n                                    _hover={{\n                                        bg: \"#2b5869\",\n                                        cursor: \"pointer\",\n                                    }}\n                                    onClick={() => {\n                                        updateSelectedState(\n                                            !ingredient.selected,\n                                            index\n                                        )\n                                    }}\n                                >\n                                    <Box\n                                        w=\"4\"\n                                        h=\"4\"\n                                        borderRadius=\"50%\"\n                                        border=\"2px solid teal\"\n                                        bg={\n                                            ingredient.selected\n                                                ? \"teal\"\n                                                : \"white\"\n                                        }\n                                    ></Box>\n                                    <Text fontSize=\"lg\">\n                                        {capitalize(ingredient.food)}\n                                    </Text>\n                                    <Text fontSize=\"lg\" color=\"gray.300\">\n                                        {IngredientSum} {unit}\n                                    </Text>\n                                </Grid>\n                            )\n                        })}\n                    </Box>\n\n                    <Box fontSize=\"2xl\" color=\"white\" mt=\"50\">\n                        <Heading as=\"h2\" my=\"4\">\n                            Recipe Description{\" \"}\n                        </Heading>\n                        <UnorderedList>\n                            {currentIngredient.recipe.ingredientLines.map(\n                                (line) => {\n                                    return <ListItem>{line}</ListItem>\n                                }\n                            )}\n                        </UnorderedList>\n                    </Box>\n                </Box>\n                <Box width=\"50%\" maxW={600}>\n                    <Image\n                        src={\n                            pickLargesImage(\n                                currentIngredient?.recipe?.images\n                            ) as unknown as string\n                        }\n                        width=\"100%\"\n                        fallbackSrc=\"placeholder.png\"\n                        alt=\"hey\"\n                    />\n                    <Box maxW={1600} mx=\"auto\">\n                        <Text color=\"blue.50\" my=\"5\" fontWeight=\"bold\">\n                            Per 100 g\n                        </Text>\n                        <Grid\n                            gap={4}\n                            gridTemplateColumns=\"repeat(auto-fill, minmax(200px, 1fr))\"\n                            gridAutoRows=\"1fr 1fr\"\n                        >\n                            <List color=\"blue.50\">\n                                {primaryNutrients.map((nutrient, index) => (\n                                    <MetricListItem\n                                        key={nutrient.label + index}\n                                        type={nutrient.label}\n                                        metric={nutrient.quantity}\n                                        unit={nutrient.unit}\n                                        flexGrow={1}\n                                    />\n                                ))}\n                            </List>\n\n                            {SplitNutritionGrid(filteredNutrients, 3)}\n                        </Grid>\n                    </Box>\n                </Box>\n            </Flex>\n        </Box>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx",["76","77","78","79"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx",["80"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx",["81","82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":2,"column":31,"nodeType":"89","messageId":"90","endLine":2,"endColumn":37},{"ruleId":"87","severity":1,"message":"91","line":2,"column":22,"nodeType":"89","messageId":"90","endLine":2,"endColumn":31},{"ruleId":"87","severity":1,"message":"92","line":3,"column":10,"nodeType":"89","messageId":"90","endLine":3,"endColumn":21},{"ruleId":"87","severity":1,"message":"93","line":12,"column":5,"nodeType":"89","messageId":"90","endLine":12,"endColumn":16},{"ruleId":"87","severity":1,"message":"94","line":21,"column":29,"nodeType":"89","messageId":"90","endLine":21,"endColumn":40},{"ruleId":"87","severity":1,"message":"91","line":21,"column":42,"nodeType":"89","messageId":"90","endLine":21,"endColumn":51},{"ruleId":"87","severity":1,"message":"95","line":26,"column":10,"nodeType":"89","messageId":"90","endLine":26,"endColumn":24},{"ruleId":"87","severity":1,"message":"96","line":40,"column":16,"nodeType":"89","messageId":"90","endLine":40,"endColumn":40},{"ruleId":"87","severity":1,"message":"97","line":1,"column":37,"nodeType":"89","messageId":"90","endLine":1,"endColumn":43},{"ruleId":"87","severity":1,"message":"98","line":1,"column":32,"nodeType":"89","messageId":"90","endLine":1,"endColumn":42},{"ruleId":"87","severity":1,"message":"91","line":1,"column":44,"nodeType":"89","messageId":"90","endLine":1,"endColumn":53},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"@typescript-eslint/no-unused-vars","'faUser' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'OrderedList' is defined but never used.","'useCallback' is defined but never used.","'useCurrentUser' is defined but never used.","'useMongoAnonymousConnect' is defined but never used.","'Method' is defined but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation"]
[{"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx":"1","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx":"2","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx":"3","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx":"4","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx":"5","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\ingredient.tsx":"6","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\recipes.tsx":"7","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx":"8","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts":"9","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx":"10","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx":"11","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx":"12","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx":"13","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx":"14","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx":"15","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx":"16","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\profil.tsx":"17"},{"size":1746,"mtime":1642965939433,"results":"18","hashOfConfig":"19"},{"size":6000,"mtime":1644094883115,"results":"20","hashOfConfig":"19"},{"size":433,"mtime":1640119400000,"results":"21","hashOfConfig":"19"},{"size":2258,"mtime":1643839875617,"results":"22","hashOfConfig":"19"},{"size":4863,"mtime":1643240737800,"results":"23","hashOfConfig":"19"},{"size":2007,"mtime":1641164231066,"results":"24","hashOfConfig":"19"},{"size":15018,"mtime":1643242195392,"results":"25","hashOfConfig":"19"},{"size":991,"mtime":1641163674284,"results":"26","hashOfConfig":"19"},{"size":4658,"mtime":1644095672223,"results":"27","hashOfConfig":"19"},{"size":4084,"mtime":1641145135251,"results":"28","hashOfConfig":"19"},{"size":838,"mtime":1643239873335,"results":"29","hashOfConfig":"19"},{"size":558,"mtime":1642037679206,"results":"30","hashOfConfig":"19"},{"size":1783,"mtime":1643834856422,"results":"31","hashOfConfig":"19"},{"size":12509,"mtime":1642959476106,"results":"32","hashOfConfig":"19"},{"size":1458,"mtime":1642463186141,"results":"33","hashOfConfig":"34"},{"size":1318,"mtime":1642958659578,"results":"35","hashOfConfig":"19"},{"size":145,"mtime":1642965808187,"results":"36","hashOfConfig":"19"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"qd1rg2",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"39"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"39"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"nmj2ys",{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"39"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx",[],["77","78"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx",["79","80","81"],"import {\n    Box,\n    Button,\n    Flex,\n    HStack,\n    IconButton,\n    Popover,\n    PopoverArrow,\n    PopoverBody,\n    PopoverCloseButton,\n    PopoverContent,\n    PopoverHeader,\n    PopoverTrigger,\n    Stack,\n    Text,\n    useDisclosure,\n} from \"@chakra-ui/react\"\nimport {\n    faSignInAlt,\n    faStar as faStarSolid,\n    faUser,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport { useRealmApp } from \"../context/userContext\"\nimport { LoginModal } from \"./LoginModal\"\nimport MenuIcon from \"./MenuIcon\"\n\nexport default function Header() {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const app = useRealmApp()\n    const [isLoggedIn, setIsLoggedIn] = useState(app.currentUser?.isLoggedIn)\n\n    useEffect(() => {\n        setIsLoggedIn(app.currentUser?.isLoggedIn)\n    }, [app.currentUser?.isLoggedIn])\n\n    async function logout() {\n        const logout = await app.currentUser?.logOut()\n        setIsLoggedIn(app.currentUser?.isLoggedIn)\n    }\n\n    console.log(\"app: \", app)\n    return (\n        <>\n            <Box as=\"header\" bg=\"cyan.900\">\n                <Flex\n                    as=\"nav\"\n                    justify=\"space-between\"\n                    align=\"center\"\n                    mx=\"auto\"\n                    py=\"4\"\n                    px={{ base: 4, \"2xl\": 10 }}\n                >\n                    <Link to=\"/\">\n                        <Box className=\"logo\"></Box>\n                    </Link>\n\n                    <HStack spacing={4}>\n                        <Text color=\"white\">\n                            {app.currentUser?.profile.email}\n                        </Text>\n                        <MenuIcon\n                            to=\"/favorite\"\n                            icon={faStarSolid}\n                            title=\"Favoritter\"\n                        />\n\n                        {isLoggedIn ? (\n                            <Popover>\n                                <PopoverTrigger>\n                                    <IconButton\n                                        colorScheme=\"teal\"\n                                        aria-label=\"Profil\"\n                                        size=\"lg\"\n                                        title=\"Profil\"\n                                        isRound\n                                        icon={\n                                            <FontAwesomeIcon\n                                                color=\"#B4DCEC\"\n                                                icon={faUser}\n                                            />\n                                        }\n                                    />\n                                </PopoverTrigger>\n                                <PopoverContent>\n                                    <PopoverArrow />\n\n                                    <PopoverBody>\n                                        <Stack spacing={4}>\n                                            <Link\n                                                className=\"menulink-symbol\"\n                                                to=\"/profil\"\n                                            >\n                                                <Button variant=\"link\">\n                                                    Profil\n                                                </Button>\n                                            </Link>\n                                            <Button\n                                                variant=\"link\"\n                                                onClick={logout}\n                                            >\n                                                Logud\n                                            </Button>\n                                        </Stack>\n                                    </PopoverBody>\n                                </PopoverContent>\n                            </Popover>\n                        ) : (\n                            <IconButton\n                                title=\"Login\"\n                                colorScheme=\"teal\"\n                                aria-label=\"Login\"\n                                size=\"lg\"\n                                onClick={onOpen}\n                                isRound\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#B4DCEC\"\n                                        icon={faSignInAlt}\n                                    />\n                                }\n                            />\n                        )}\n                    </HStack>\n                </Flex>\n            </Box>\n            <LoginModal isOpen={isOpen} onClose={onClose} />\n        </>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\ingredient.tsx",["82","83"],"import { Box, Heading, List, Text } from \"@chakra-ui/react\"\r\nimport { useContext, useEffect } from \"react\"\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\n\r\nimport { MetricListItem } from \"../components/MetricListItem\"\r\nimport { FoodDataContext } from \"../context/DataContext\"\r\nimport { FoodDataHintsType } from \"../types/ingredients\"\r\n\r\nfunction Ingredients() {\r\n    const { id } = useParams()\r\n    // const navigate = useNavigate()\r\n    const ingredientData = useContext<Array<FoodDataHintsType>>(FoodDataContext)\r\n\r\n    // useEffect(() => {\r\n    //     if (ingredientData === null || ingredientData.length === 0) {\r\n    //         navigate(\"/\")\r\n    //     }\r\n    // }, [ingredientData, navigate])\r\n\r\n    const currentIngredient = ingredientData?.find(\r\n        (ingredient) => ingredient.food.foodId === id\r\n    )\r\n\r\n    const label = currentIngredient?.food.label\r\n    const energi = currentIngredient?.food.nutrients.ENERC_KCAL\r\n    const protein = currentIngredient?.food.nutrients.PROCNT\r\n    const fat = currentIngredient?.food.nutrients.FAT\r\n    const fibers = currentIngredient?.food.nutrients.FIBTG\r\n    const carbohydrate = currentIngredient?.food.nutrients.CHOCDF\r\n\r\n    return (\r\n        <Box as=\"main\" bg=\"#1A2C33\" p=\"4\">\r\n            <Heading color=\"blue.50\">{label}</Heading>\r\n\r\n            <Text color=\"blue.50\" my=\"5\" fontWeight=\"bold\">\r\n                Per 100 g\r\n            </Text>\r\n            <List color=\"blue.50\" maxW=\"60\">\r\n                <MetricListItem type=\"Energi\" metric={energi} unit=\"kcal\" />\r\n                <MetricListItem type=\"Protein\" metric={protein} unit=\"g\" />\r\n                <MetricListItem type=\"Fat\" metric={fat} unit=\"g\" />\r\n                <MetricListItem type=\"Fibers\" metric={fibers} unit=\"g\" />\r\n                <MetricListItem\r\n                    type=\"Carbohydrate\"\r\n                    metric={carbohydrate}\r\n                    unit=\"g\"\r\n                />\r\n            </List>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Ingredients\r\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\recipes.tsx",["84"],"import {\n    Box,\n    Flex,\n    Grid,\n    GridItem,\n    HStack,\n    Heading,\n    IconButton,\n    Image,\n    List,\n    ListItem,\n    OrderedList,\n    Select,\n    Text,\n    UnorderedList,\n} from \"@chakra-ui/react\"\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\"\nimport { faStar as faStarRegular } from \"@fortawesome/free-regular-svg-icons\"\nimport {\n    faConciergeBell,\n    faFireAlt,\n    faPrint,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { capitalize } from \"lodash\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\n\nimport { MetricListItem } from \"../components/MetricListItem\"\nimport { RecipesDataContext } from \"../context/DataContext\"\nimport {\n    RecipesData,\n    RecipesImages,\n    RecipiesIngredients,\n} from \"../types/recipes\"\n\ntype ingredientsListType = (RecipiesIngredients & { selected: boolean })[]\n\nexport default function Recipies() {\n    const { id } = useParams()\n    const navigate = useNavigate()\n    const recipesData = useContext<RecipesData>(RecipesDataContext)\n    const [recipeAmount, setRecipeAmount] = useState(1)\n    const [ingredientsList, setIngredientsList] = useState<ingredientsListType>(\n        []\n    )\n\n    const updateSelectedState = (newState: boolean, index: number) => {\n        const t = [...ingredientsList]\n        t[index].selected = newState\n        setIngredientsList(t)\n    }\n\n    useEffect(() => {\n        if (recipesData === null || JSON.stringify(recipesData) === \"{}\") {\n            navigate(\"/\")\n        }\n    }, [recipesData, navigate])\n\n    const currentIngredient = recipesData.hits?.find(\n        (hit) => hit.recipe.id === id\n    )\n\n    useEffect(() => {\n        if (currentIngredient !== undefined) {\n            setIngredientsList(\n                currentIngredient?.recipe.ingredients.map((item) => {\n                    return { ...item, selected: false }\n                })\n            )\n        }\n    }, [currentIngredient, currentIngredient?.recipe.ingredients])\n\n    if (currentIngredient === undefined) return <></>\n\n    const totalNutrients = Object.values(\n        currentIngredient?.recipe.totalNutrients\n    ).filter((item) => item.quantity !== 0)\n\n    const macroAcides = [\"Fat\", \"Energy\", \"Carbs\", \"Fiber\", \"Protein\"]\n    const primaryNutrients = totalNutrients.filter((item, index) =>\n        macroAcides.includes(item.label)\n    )\n    const filteredNutrients = totalNutrients\n        .filter((item) => !macroAcides.includes(item.label))\n        .sort((a, b) => {\n            if (a.unit === \"g\") return -1\n\n            if (a.unit === b.unit) {\n                return b.quantity - a.quantity\n            }\n\n            if (\n                (a.unit === \"g\" && b.unit !== a.unit) ||\n                (a.unit === \"mg\" && b.unit !== a.unit)\n            ) {\n                return -1\n            } else return 1\n        })\n\n    const label = currentIngredient.recipe.label\n\n    const pickLargesImage = (images: RecipesImages) => {\n        if (images === undefined) return \"placeholder.png\"\n        const imagesArray = Object.values(images)\n        // @ts-ignore\n        const sorted = imagesArray.sort((a, b) => b.width - a.width)\n        // @ts-ignore\n        return sorted[0].url\n    }\n\n    function NutritionGridItem(index: number, subarray: typeof totalNutrients) {\n        return (\n            <GridItem key={index}>\n                <List color=\"blue.50\">\n                    {subarray.map((nutrient, index) => (\n                        <MetricListItem\n                            key={index + nutrient.label}\n                            type={nutrient.label}\n                            metric={nutrient.quantity}\n                            unit={nutrient.unit}\n                        />\n                    ))}\n                </List>\n            </GridItem>\n        )\n    }\n\n    function SplitNutritionGrid(\n        nutrietnsArray: typeof totalNutrients,\n        numberOfSplits: number\n    ) {\n        const ListItemAmount = Math.floor(\n            nutrietnsArray.length / numberOfSplits\n        )\n\n        const subArrys = new Array(numberOfSplits)\n            .fill(1)\n            .map((item, index) =>\n                nutrietnsArray.slice(\n                    index * ListItemAmount,\n                    (index + 1) * ListItemAmount\n                )\n            )\n\n        return subArrys.map((nutrient, index, array) => (\n            <GridItem key={index}>\n                <List color=\"blue.50\">\n                    {NutritionGridItem(index, nutrient)}\n                </List>\n            </GridItem>\n        ))\n    }\n\n    return (\n        <Box as=\"main\" bg=\"#1A2C33\" p=\"4\" pb=\"200\" mt=\"10\">\n            <Flex\n                maxW={1600}\n                mx=\"auto\"\n                alignItems=\"start\"\n                justify=\"space-between\"\n                w=\"100%\"\n                gap=\"20\"\n            >\n                <Box flexBasis={600} flexGrow={1}>\n                    <Flex justify=\"space-between\">\n                        <Heading color=\"blue.50\">{label}</Heading>\n                        <HStack spacing={4}>\n                            <IconButton\n                                // colorScheme=\"teal\"\n                                bg=\"#335563\"\n                                aria-label=\"add to favorites\"\n                                size=\"lg\"\n                                title=\"add to favorites\"\n                                isRound\n                                _hover={{ bg: \"teal\" }}\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1A2C33\"\n                                        icon={faStarRegular}\n                                    />\n                                }\n                                onClick={() => {\n                                    console.log(\"add to favorites\")\n                                }}\n                            />\n                            <IconButton\n                                // colorScheme=\"teal\"\n                                bg=\"#335563\"\n                                aria-label=\"Print\"\n                                size=\"lg\"\n                                title=\"Print\"\n                                isRound\n                                _hover={{ bg: \"teal\" }}\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1A2C33\"\n                                        icon={faPrint}\n                                    />\n                                }\n                                onClick={() => {\n                                    window.print()\n                                }}\n                            />\n                        </HStack>\n                    </Flex>\n                    <HStack spacing={6} mt=\"5\">\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faClock}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {currentIngredient.recipe.totalTime} min\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faFireAlt}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {Math.round(currentIngredient.recipe.calories)}{\" \"}\n                                cal\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faConciergeBell}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {currentIngredient.recipe.yield} Portions\n                            </Text>\n                        </HStack>\n                    </HStack>\n                    <Flex justify=\"end\">\n                        <Select\n                            placeholder=\"Select option\"\n                            w=\"200\"\n                            bg=\"#26404A\"\n                            border=\"none\"\n                            color=\"white\"\n                            colorScheme=\"teal\"\n                            onChange={(e) => {\n                                setRecipeAmount(Number(e.target.value))\n                            }}\n                        >\n                            <option selected value=\"1\">\n                                Person 1\n                            </option>\n                            <option value=\"2\">Person 2</option>\n                            <option value=\"3\">Person 3</option>\n                            <option value=\"4\">Person 4</option>\n                            <option value=\"5\">Person 5</option>\n                            <option value=\"6\">Person 6</option>\n                            <option value=\"7\">Person 7</option>\n                            <option value=\"8\">Person 8</option>\n                        </Select>\n                    </Flex>\n                    <Box>\n                        {ingredientsList?.map((ingredient, index) => {\n                            const quantity =\n                                ingredient.quantity === 0\n                                    ? Number(ingredient.weight.toFixed(2))\n                                    : Number(ingredient.quantity.toFixed(2))\n                            console.log(\n                                \"ingredient.measure : \",\n                                ingredient.measure\n                            )\n                            const unit =\n                                ingredient.measure === \"<unit>\"\n                                    ? \"\"\n                                    : ingredient.quantity === 0\n                                    ? \"g\"\n                                    : ingredient.measure\n\n                            const IngredientSum = recipeAmount * quantity\n\n                            return (\n                                <Grid\n                                    bg={\n                                        ingredient.selected\n                                            ? \"#00506f\"\n                                            : \"#26404A\"\n                                    }\n                                    color=\"white\"\n                                    p=\"4\"\n                                    templateColumns=\"10% 1fr 20%\"\n                                    alignItems=\"center\"\n                                    w=\"100%\"\n                                    minW=\"600\"\n                                    borderRadius={4}\n                                    my=\"4\"\n                                    _hover={{\n                                        bg: \"#2b5869\",\n                                        cursor: \"pointer\",\n                                    }}\n                                    onClick={() => {\n                                        updateSelectedState(\n                                            !ingredient.selected,\n                                            index\n                                        )\n                                    }}\n                                >\n                                    <Box\n                                        w=\"4\"\n                                        h=\"4\"\n                                        borderRadius=\"50%\"\n                                        border=\"2px solid teal\"\n                                        bg={\n                                            ingredient.selected\n                                                ? \"teal\"\n                                                : \"white\"\n                                        }\n                                    ></Box>\n                                    <Text fontSize=\"lg\">\n                                        {capitalize(ingredient.food)}\n                                    </Text>\n                                    <Text fontSize=\"lg\" color=\"gray.300\">\n                                        {IngredientSum} {unit}\n                                    </Text>\n                                </Grid>\n                            )\n                        })}\n                    </Box>\n\n                    <Box fontSize=\"2xl\" color=\"white\" mt=\"50\">\n                        <Heading as=\"h2\" my=\"4\">\n                            Recipe Description{\" \"}\n                        </Heading>\n                        <UnorderedList>\n                            {currentIngredient.recipe.ingredientLines.map(\n                                (line) => {\n                                    return <ListItem>{line}</ListItem>\n                                }\n                            )}\n                        </UnorderedList>\n                    </Box>\n                </Box>\n                <Box minW={300} maxW={600} flexGrow={1}>\n                    <Image\n                        src={\n                            pickLargesImage(\n                                currentIngredient?.recipe?.images\n                            ) as unknown as string\n                        }\n                        width=\"100%\"\n                        fallbackSrc=\"placeholder.png\"\n                        alt=\"hey\"\n                    />\n                    <Box maxW={1600} mx=\"auto\">\n                        <Text color=\"blue.50\" my=\"5\" fontWeight=\"bold\">\n                            Per 100 g\n                        </Text>\n                        <Grid\n                            gap={2}\n                            gridTemplateColumns=\"repeat(auto-fill, minmax(200px, 1fr))\"\n                        >\n                            <List color=\"blue.50\">\n                                {primaryNutrients.map((nutrient, index) => (\n                                    <MetricListItem\n                                        key={nutrient.label + index}\n                                        type={nutrient.label}\n                                        metric={nutrient.quantity}\n                                        unit={nutrient.unit}\n                                        flexGrow={1}\n                                    />\n                                ))}\n                            </List>\n\n                            {SplitNutritionGrid(filteredNutrients, 3)}\n                        </Grid>\n                    </Box>\n                </Box>\n            </Flex>\n        </Box>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts",["85","86","87"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx",["88","89","90","91"],"import assert from \"assert\"\n\nimport {\n    Box,\n    Button,\n    Flex,\n    FormControl,\n    FormHelperText,\n    FormLabel,\n    Input,\n    InputGroup,\n    InputRightElement,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    Stack,\n    useBoolean,\n} from \"@chakra-ui/react\"\nimport { MouseEventHandler, useCallback, useEffect } from \"react\"\nimport { SubmitHandler, useForm } from \"react-hook-form\"\nimport * as Realm from \"realm-web\"\n\n// Realm.getApp().logout()\nimport { useCurrentUser, useRealmApp } from \"../context/userContext\"\n\ntype ModalProps = {\n    isOpen: boolean\n    onOpen?: () => void\n    onClose: () => void\n}\n\ntype Inputs = {\n    fullname: string\n    email: string\n    password: string\n}\n\nfunction useAnonymousLogin() {\n    const app = new Realm.App({ id: \"salvare-foodapp-iwodd\" })\n\n    const credentials = Realm.Credentials.anonymous()\n\n    useEffect(() => {\n        app.logIn(credentials)\n            .then((user) => {\n                console.log(user)\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return app.currentUser\n}\n\nexport async function linkAccounts(\n    user: Realm.User,\n    email: string,\n    password: string\n) {\n    const emailPasswordUserCredentials = Realm.Credentials.emailPassword(\n        email,\n        password\n    )\n    await user.linkCredentials(emailPasswordUserCredentials)\n}\n\nfunction LoginContent(props: {\n    setIsLogin: { toggle: MouseEventHandler<HTMLButtonElement> }\n    onClose: () => void\n}) {\n    const {\n        register,\n        handleSubmit,\n        setError,\n        formState: { errors },\n    } = useForm<Inputs>()\n    const [show, setShow] = useBoolean()\n    const app = useRealmApp()\n\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\n        const credentials = Realm.Credentials.emailPassword(\n            data.email,\n            data.password\n        )\n\n        try {\n            await app.logIn(credentials)\n            props.onClose()\n        } catch (err) {\n            setError(\"email\", {\n                type: \"login failed\",\n                message: \"Check your email and try again\",\n            })\n            setError(\"password\", {\n                type: \"login failed\",\n                message: \"Check Password and try again\",\n            })\n        }\n    }\n\n    return (\n        <ModalContent>\n            <ModalHeader>Login</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <Stack spacing={8}>\n                        <FormControl>\n                            <FormLabel htmlFor=\"email\">Email address</FormLabel>\n                            <Input\n                                id=\"email\"\n                                type=\"email\"\n                                autoComplete=\"email\"\n                                {...register(\"email\", { required: true })}\n                            />\n                            {errors.email?.type && (\n                                <FormHelperText color=\"red.500\">\n                                    {errors.email.message}\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                        <Box>\n                            <FormControl>\n                                <FormLabel htmlFor=\"password\">\n                                    Password\n                                </FormLabel>\n                                <InputGroup size=\"md\">\n                                    <Input\n                                        {...register(\"password\", {\n                                            required: true,\n                                        })}\n                                        pr=\"4.5rem\"\n                                        type={show ? \"text\" : \"password\"}\n                                        placeholder=\"Enter password\"\n                                        id=\"password\"\n                                        autoComplete=\"current-password\"\n                                    />\n                                    <InputRightElement width=\"4.5rem\">\n                                        <Button\n                                            h=\"1.75rem\"\n                                            size=\"sm\"\n                                            onClick={setShow.toggle}\n                                        >\n                                            {show ? \"Hide\" : \"Show\"}\n                                        </Button>\n                                    </InputRightElement>\n                                </InputGroup>\n                                {errors.password?.type && (\n                                    <FormHelperText color=\"red.500\">\n                                        {errors.password.message}\n                                    </FormHelperText>\n                                )}\n                            </FormControl>\n                        </Box>\n                    </Stack>\n                    <Input\n                        bg=\"teal\"\n                        color=\"white\"\n                        w=\"full\"\n                        type=\"submit\"\n                        value=\"Login\"\n                        mt=\"8\"\n                        cursor=\"pointer\"\n                    />\n                </form>\n            </ModalBody>\n            <ModalFooter>\n                <Flex justify=\"center\" w=\"full\">\n                    <Button\n                        as=\"a\"\n                        colorScheme=\"teal\"\n                        variant=\"ghost\"\n                        w=\"full\"\n                        mr={3}\n                        cursor=\"pointer\"\n                        onClick={props.setIsLogin.toggle}\n                    >\n                        Register\n                    </Button>\n                </Flex>\n            </ModalFooter>\n        </ModalContent>\n    )\n}\n\nfunction RegisterContent(props: {\n    setIsLogin: any\n    // anonymousUser?: Realm.User\n}) {\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n    } = useForm<Inputs>()\n    const [show, setShow] = useBoolean()\n    console.log(\"errors: \", errors)\n    const app = useRealmApp()\n\n    const onSubmit: SubmitHandler<Inputs> = async (data) => {\n        console.log(\"app: \", app)\n\n        try {\n            await app.emailPasswordAuth.registerUser({\n                email: data.email,\n                password: data.password,\n            })\n\n            // const linkedAccount = await linkAccounts(app.currentUser, data.email, data.password)\n            // console.log('linkedAccount: ', linkedAccount);\n\n            // const currentUser = await app.logIn(credentials)\n            // const mongodb = app.currentUser?.mongoClient(\"mongodb-atlas\")\n\n            // await mongodb?.db(\"salvare\").collection(\"users\").insertOne({\n            //     uid: currentUser?.id,\n            //     username: data.fullname,\n            //     email: data.email,\n            //     favoriteRecipes: [],\n            // })\n\n            props.setIsLogin.toggle()\n        } catch (err) {\n            console.error(\"Failed to registering new user\", err)\n        }\n    }\n\n    return (\n        <ModalContent>\n            <ModalHeader>Register</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <Stack spacing={8}>\n                        <FormControl>\n                            <FormLabel htmlFor=\"fullname\">Full name</FormLabel>\n                            <Input\n                                {...register(\"fullname\", {\n                                    required: true,\n                                })}\n                                placeholder=\"Enter name or a nickname\"\n                                id=\"fullname\"\n                                name=\"fullname\"\n                                size=\"md\"\n                            />\n                            <FormHelperText>\n                                Your name is also be your username\n                            </FormHelperText>\n                        </FormControl>\n                        <FormControl>\n                            <FormLabel htmlFor=\"email\">Email address</FormLabel>\n                            <Input\n                                id=\"email\"\n                                type=\"email\"\n                                autoComplete=\"email\"\n                                {...register(\"email\", {\n                                    required: true,\n                                })}\n                            />\n                            <FormHelperText>\n                                We'll never share your email.\n                            </FormHelperText>\n                        </FormControl>\n                        <Box>\n                            <FormControl>\n                                <FormLabel htmlFor=\"password\">\n                                    Password\n                                </FormLabel>\n                                <InputGroup size=\"md\">\n                                    <Input\n                                        {...register(\"password\", {\n                                            required: true,\n                                            minLength: 8,\n                                        })}\n                                        pr=\"4.5rem\"\n                                        type={show ? \"text\" : \"password\"}\n                                        placeholder=\"Enter password\"\n                                        id=\"password\"\n                                        autoComplete=\"current-password\"\n                                    />\n                                    <InputRightElement width=\"4.5rem\">\n                                        <Button\n                                            h=\"1.75rem\"\n                                            size=\"sm\"\n                                            onClick={setShow.toggle}\n                                        >\n                                            {show ? \"Hide\" : \"Show\"}\n                                        </Button>\n                                    </InputRightElement>\n                                </InputGroup>\n                                {errors.password?.type && (\n                                    <FormHelperText color=\"red.500\">\n                                        {errors.password?.type ===\n                                            \"minLength\" &&\n                                            \"Password has to be at least 8 charectors long\"}{\" \"}\n                                        {errors.password.message}\n                                    </FormHelperText>\n                                )}\n                            </FormControl>\n                        </Box>\n                    </Stack>\n                    <Input\n                        bg=\"teal\"\n                        color=\"white\"\n                        w=\"full\"\n                        type=\"submit\"\n                        value=\"Register\"\n                        mt=\"8\"\n                        cursor=\"pointer\"\n                    />\n                </form>\n            </ModalBody>\n            <ModalFooter>\n                <Flex justify=\"center\" w=\"full\">\n                    <Button\n                        as=\"a\"\n                        colorScheme=\"teal\"\n                        variant=\"ghost\"\n                        mr={3}\n                        w=\"full\"\n                        cursor=\"pointer\"\n                        onClick={props.setIsLogin.toggle}\n                    >\n                        Login\n                    </Button>\n                </Flex>\n            </ModalFooter>\n        </ModalContent>\n    )\n}\n\nexport function LoginModal({ isOpen, onOpen, onClose }: ModalProps) {\n    // useAnonymousLogin()\n\n    const [isLogin, setIsLogin] = useBoolean(true)\n\n    return (\n        <Modal onClose={onClose} size=\"md\" isOpen={isOpen}>\n            <ModalOverlay />\n            <LoginContent setIsLogin={setIsLogin} onClose={onClose} />\n            {!isLogin && (\n                <RegisterContent\n                    // anonymousUser={anonymousUser}\n                    setIsLogin={setIsLogin}\n                />\n            )}\n        </Modal>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx",["92"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx",["93","94"],"import React, { createContext, useContext, useEffect, useState } from \"react\"\nimport * as Realm from \"realm-web\"\n\nimport { ContextProviderProps } from \"./ThemeContext\"\n\nexport const CurrentUserContext = createContext<any>({})\nexport const UpdateCurrentUserContext = createContext<any>({})\n\n// export const MongoAppContext = createContext<App>({})\n// export const UpdateMongoAppContext = createContext<App>({})\n\nexport default function UserMongoContext({ children }: ContextProviderProps) {\n    const [currentUser, setCurrentUser] = useState()\n    // const [mongoApp, setMognoApp] = useState()\n\n    return (\n        <CurrentUserContext.Provider value={currentUser}>\n            <UpdateCurrentUserContext.Provider value={setCurrentUser}>\n                {/* <MongoAppContext.Provider value={mongoApp}>\n                    <UpdateMongoAppContext.Provider value={setMognoApp}> */}\n                {children}\n                {/* </UpdateMongoAppContext.Provider>\n                </MongoAppContext.Provider> */}\n            </UpdateCurrentUserContext.Provider>\n        </CurrentUserContext.Provider>\n    )\n}\n\nexport function useRealmApp() {\n    return Realm.App.getApp(\"salvare-foodapp-iwodd\")\n}\n\nexport function useCurrentUser() {\n    const app = new Realm.App({ id: \"salvare-foodapp-iwodd\" })\n    return app.currentUser\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\profil.tsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":10,"column":5,"nodeType":"101","messageId":"102","endLine":10,"endColumn":23},{"ruleId":"99","severity":1,"message":"103","line":12,"column":5,"nodeType":"101","messageId":"102","endLine":12,"endColumn":18},{"ruleId":"99","severity":1,"message":"104","line":41,"column":15,"nodeType":"101","messageId":"102","endLine":41,"endColumn":21},{"ruleId":"99","severity":1,"message":"105","line":2,"column":22,"nodeType":"101","messageId":"102","endLine":2,"endColumn":31},{"ruleId":"99","severity":1,"message":"106","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":21},{"ruleId":"99","severity":1,"message":"107","line":12,"column":5,"nodeType":"101","messageId":"102","endLine":12,"endColumn":16},{"ruleId":"99","severity":1,"message":"108","line":1,"column":30,"nodeType":"101","messageId":"102","endLine":1,"endColumn":36},{"ruleId":"99","severity":1,"message":"109","line":30,"column":12,"nodeType":"101","messageId":"102","endLine":30,"endColumn":17},{"ruleId":"99","severity":1,"message":"110","line":43,"column":13,"nodeType":"101","messageId":"102","endLine":43,"endColumn":24},{"ruleId":"99","severity":1,"message":"111","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":14},{"ruleId":"99","severity":1,"message":"112","line":23,"column":29,"nodeType":"101","messageId":"102","endLine":23,"endColumn":40},{"ruleId":"99","severity":1,"message":"113","line":28,"column":10,"nodeType":"101","messageId":"102","endLine":28,"endColumn":24},{"ruleId":"99","severity":1,"message":"114","line":42,"column":10,"nodeType":"101","messageId":"102","endLine":42,"endColumn":27},{"ruleId":"99","severity":1,"message":"115","line":1,"column":37,"nodeType":"101","messageId":"102","endLine":1,"endColumn":43},{"ruleId":"99","severity":1,"message":"116","line":1,"column":32,"nodeType":"101","messageId":"102","endLine":1,"endColumn":42},{"ruleId":"99","severity":1,"message":"105","line":1,"column":44,"nodeType":"101","messageId":"102","endLine":1,"endColumn":53},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"@typescript-eslint/no-unused-vars","'PopoverCloseButton' is defined but never used.","Identifier","unusedVar","'PopoverHeader' is defined but never used.","'logout' is assigned a value but never used.","'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'OrderedList' is defined but never used.","'useRef' is defined but never used.","'count' is assigned a value but never used.","'currentPage' is assigned a value but never used.","'assert' is defined but never used.","'useCallback' is defined but never used.","'useCurrentUser' is defined but never used.","'useAnonymousLogin' is defined but never used.","'Method' is defined but never used.","'useContext' is defined but never used.","no-global-assign","no-unsafe-negation"]
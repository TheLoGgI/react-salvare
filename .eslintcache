[{"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx":"1","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx":"2","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx":"3","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx":"4","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx":"5","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx":"6","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts":"7","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx":"8","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx":"9","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx":"10","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx":"11","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx":"12","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx":"13","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx":"14","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\index.ts":"15","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\CustomButtonStyles.ts":"16","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\CustomInput.ts":"17","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\index.ts":"18","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\CustomButton.tsx":"19","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Profil\\Profil.tsx":"20","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Ingredients\\ingredient.tsx":"21","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Discovery\\Discovery.tsx":"22","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Recipes\\recipes.tsx":"23","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\index.tsx":"24","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Landing\\landing.tsx":"25","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Discovery\\index.ts":"26","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Profil\\index.ts":"27","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Ingredients\\index.tsx":"28","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Recipes\\index.tsx":"29"},{"size":714,"mtime":1644272668541,"results":"30","hashOfConfig":"31"},{"size":2336,"mtime":1646254453392,"results":"32","hashOfConfig":"31"},{"size":652,"mtime":1644165022712,"results":"33","hashOfConfig":"31"},{"size":2258,"mtime":1643839875617,"results":"34","hashOfConfig":"31"},{"size":7062,"mtime":1646254778233,"results":"35","hashOfConfig":"31"},{"size":991,"mtime":1644170211215,"results":"36","hashOfConfig":"31"},{"size":4279,"mtime":1644513546364,"results":"37","hashOfConfig":"31"},{"size":3707,"mtime":1644274142193,"results":"38","hashOfConfig":"31"},{"size":875,"mtime":1644272124418,"results":"39","hashOfConfig":"31"},{"size":646,"mtime":1645233406501,"results":"40","hashOfConfig":"31"},{"size":1783,"mtime":1643834856422,"results":"41","hashOfConfig":"31"},{"size":12770,"mtime":1646249662166,"results":"42","hashOfConfig":"31"},{"size":1458,"mtime":1642463186141,"results":"43","hashOfConfig":"44"},{"size":1734,"mtime":1646250313621,"results":"45","hashOfConfig":"31"},{"size":2577,"mtime":1645309543912,"results":"46","hashOfConfig":"31"},{"size":580,"mtime":1644258427380,"results":"47","hashOfConfig":"31"},{"size":1043,"mtime":1644258571724,"results":"48","hashOfConfig":"31"},{"size":51,"mtime":1644268433362,"results":"49","hashOfConfig":"31"},{"size":488,"mtime":1644273106742,"results":"50","hashOfConfig":"31"},{"size":6312,"mtime":1646254305833,"results":"51","hashOfConfig":"31"},{"size":1710,"mtime":1645303615423,"results":"52","hashOfConfig":"31"},{"size":5452,"mtime":1646252094468,"results":"53","hashOfConfig":"31"},{"size":17748,"mtime":1646244851037,"results":"54","hashOfConfig":"31"},{"size":277,"mtime":1645234615364,"results":"55","hashOfConfig":"31"},{"size":141,"mtime":1645233691684,"results":"56","hashOfConfig":"31"},{"size":61,"mtime":1645303978256,"results":"57","hashOfConfig":"31"},{"size":52,"mtime":1645304017982,"results":"58","hashOfConfig":"31"},{"size":66,"mtime":1645303938151,"results":"59","hashOfConfig":"31"},{"size":57,"mtime":1645304067356,"results":"60","hashOfConfig":"31"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"qd1rg2",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"nmj2ys",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"63"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"97"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"63"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx",[],["126","127"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx",["128"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts",["129"],"import { useEffect, useMemo, useRef, useState } from \"react\"\n\nimport {\n    FoodDataHintsType,\n    FoodDataType,\n    useFoodRequest,\n} from \"../types/ingredients\"\nimport { RecipesData, RecipesDataHints } from \"../types/recipes\"\nimport useFetch from \"./useFetch\"\n\ntype PaginationDetails = {\n    pagesPerPage: number\n    numberOfPages: number\n    currentPage: number\n}\nconst RECIPES_API_ID = process.env.REACT_APP_API_RECIPES_ID\nconst RECIPES_API_KEY = process.env.REACT_APP_API_RECIPES_KEY\n\nconst fetchOptions: RequestInit = { method: \"GET\", mode: \"cors\" }\n\nexport function useRecipies(\n    search: string,\n    accumaltivePagination: boolean\n): useFoodRequest<RecipesData> {\n    const [pagination, setPagination] = useState<\n        Map<string, Array<RecipesDataHints[]>>\n    >(new Map())\n    const [recipieUrl, setRecipieUrl] = useState<string>(\"\")\n\n    const { data: recipiesData, ...rest } = useFetch<RecipesData>(\n        recipieUrl,\n        fetchOptions\n    )\n\n    const pages = useMemo<PaginationDetails>(() => {\n        if (recipiesData === null || recipiesData.count === 0) {\n            return { pagesPerPage: 0, numberOfPages: 0, currentPage: 0 }\n        }\n\n        const pagesPerPage = recipiesData.to - recipiesData.from + 1\n        const numberOfPages = recipiesData.count / pagesPerPage\n        const currentPage = recipiesData.from / pagesPerPage\n\n        return {\n            pagesPerPage,\n            numberOfPages,\n            currentPage,\n        }\n    }, [recipiesData])\n\n    const next = () => {\n        const nextRecipieLink = recipiesData?._links.next.href\n        if (nextRecipieLink) {\n            setRecipieUrl(nextRecipieLink)\n        }\n    }\n\n    useEffect(() => {\n        setRecipieUrl(\n            `https://api.edamam.com/api/recipes/v2?type=public&q=${search}&app_id=${RECIPES_API_ID}&app_key=${RECIPES_API_KEY}`\n        )\n    }, [search])\n\n    useEffect(() => {\n        const searchTerm = search.toLowerCase()\n\n        if (recipiesData !== null && recipiesData.count > 0) {\n            const tempPag = new Map(pagination)\n            const tempValue = tempPag.get(searchTerm) || []\n            tempValue.push(recipiesData.hits)\n            tempPag.set(searchTerm, tempValue)\n            setPagination(tempPag)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [recipiesData])\n\n    if (recipiesData === null) {\n        return {\n            next,\n            data: {\n                from: 1,\n                to: 1,\n                count: 0,\n                _links: {\n                    next: {\n                        href: \"\",\n                        title: \"Error\",\n                    },\n                },\n                hits: [],\n            },\n            ...rest,\n        }\n    }\n\n    const paginatedData = pagination.get(search)?.flat() || []\n    const mappedHits = paginatedData.map((hit: any) => {\n        hit!.recipe.id = hit!.recipe.uri.split(\"#\")[1]!\n        return hit\n    })\n    // console.log(\"mappedHits: \", mappedHits)\n\n    return {\n        data: {\n            ...recipiesData,\n            hits: mappedHits as RecipesDataHints[],\n        },\n        next,\n        ...pages,\n        ...rest,\n    }\n}\n\nexport function useFood(search: string): useFoodRequest<FoodDataHintsType[]> {\n    const FOOD_API_ID = process.env.REACT_APP_API_FOOD_DATABASE_ID\n    const FOOD_API_KEY = process.env.REACT_APP_API_FOOD_DATABASE_KEY\n\n    const url = `https://api.edamam.com/api/food-database/parser?ingr=${search}&app_id=${FOOD_API_ID}&app_key=${FOOD_API_KEY}`\n    const { data: foodData, ...rest } = useFetch<FoodDataType>(url)\n\n    const next = () => {\n        // const nextRecipieLink = recipiesData?._links.next.href\n        // if (nextRecipieLink) {\n        //     // setRecipieUrl(nextRecipieLink)\n        // }\n    }\n\n    if (foodData === undefined || foodData === null) {\n        return { data: [], next, ...rest }\n    }\n\n    // const filterRegex = new RegExp(search, \"gi\")\n    // const searchItems = foodData?.hints.filter((item) =>\n    //     filterRegex.test(item.food.label)\n    // )\n    // console.log(\"searchItems: \", searchItems)\n\n    return { data: foodData.hints, next, ...rest }\n}\n\n// https://api.edamam.com/api/food-database/parser?ingr=beans&app_id=7a6b01ff&app_key=c9cab2012ffacc8a812f6746ac47a614\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx",["130","131","132","133","134"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx",["135"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\index.ts",["136"],"// 1. import `extendTheme` function\nimport {\n    ThemeConfig,\n    extendTheme,\n    theme,\n    withDefaultColorScheme,\n} from \"@chakra-ui/react\"\n\nconsole.log(\"theme: \", theme)\n\n// 2. Add your color mode config\nconst config: ThemeConfig = {\n    initialColorMode: \"dark\",\n    useSystemColorMode: false,\n}\n\nconst colors = {\n    brand: {\n        100: \"#f7fafc\",\n        // ...\n        900: \"#1a202c\",\n    },\n    light: {\n        100: \"#D0DADE\",\n    },\n    whiteAlpha: {\n        ...theme.colors.whiteAlpha,\n        300: \"#B4DCEC\",\n    },\n    gray: {\n        ...theme.colors.gray,\n        200: \"#B4DCEC\",\n    },\n    teal: {\n        50: \"#E6FFFA\",\n        100: \"#335563\",\n        200: \"#335563\",\n        300: \"#4FD1C5\",\n        400: \"#38B2AC\",\n        500: \"#319795\",\n        600: \"#2C7A7B\",\n        700: \"#285E61\",\n        800: \"#234E52\",\n        900: \"#1A2C33\",\n    },\n}\n\nconst global = {\n    \"html, body\": {\n        boxSizing: \"borderBox\",\n    },\n}\n\nconst semanticTokens = {\n    colors: {\n        error: \"red.500\",\n        bg: {\n            default: \"#D0DADE\",\n            _dark: \"#1A2C33\",\n        },\n        buttonBg: {\n            default: \"#6C919F\",\n            _dark: \"#23414D\",\n        },\n        buttonBgHover: {\n            default: \"#9CE3FF\",\n            _dark: \"#1B5658\",\n        },\n        buttonBgSelected: {\n            default: \"#8FC4D9\",\n            _dark: \"#216078\",\n        },\n        buttonSubmit: {\n            default: \"#FFA23D\",\n            _dark: \"#F99323\",\n        },\n        buttonSubmitHover: {\n            default: \"#FF8500\",\n            _dark: \"#FF8500\",\n        },\n        buttonIcon: {\n            default: \"#507482\",\n            _dark: \"#B4DCEC\",\n        },\n        textSubmit: {\n            default: \"white\",\n            _dark: \"black\",\n        },\n        text: {\n            default: \"black\",\n            _dark: \"white\",\n        },\n        cardBg: {\n            default: \"#6C919F\",\n            _dark: \"#293B43\",\n        },\n        // subheading: {\n        //     default: \"black\",\n        //     _dark: \"#70C0DF\",\n        // },\n        icons: {\n            default: \"#3B525B\",\n            _dark: \"#859EA8\",\n        },\n        muted: {\n            default: \"#24343A\",\n            _dark: \"gray.300\",\n        },\n    },\n}\n\n// 3. extend the theme\nconst customTheme = extendTheme(\n    {\n        semanticTokens,\n        config,\n        global,\n        // components: {\n        //     Button: CustomButtonStyles,\n\n        //     Input: CustomInputStyles,\n        // },\n    },\n    withDefaultColorScheme({ colorScheme: \"teal\" })\n)\n\nexport default customTheme\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\CustomButtonStyles.ts",["137"],"import { theme } from \"@chakra-ui/react\"\n\nconst Button = {\n    baseStyle: ({ colorMode, isActive }: any) => {\n        return {\n            bg: colorMode === \"dark\" ? \"#23414D\" : \"#C8E9F6\",\n            color: colorMode === \"dark\" ? \"white\" : \"black\",\n            fontWeight: isActive ? \"bold\" : \"normal\",\n            _active: {\n                bg: colorMode === \"dark\" ? \"#216078\" : \"#8FC4D9\",\n            },\n            _hover: {\n                bg: colorMode === \"dark\" ? \"#1B5658\" : \"#9CE3FF\",\n            },\n        }\n    },\n\n    variants: () => ({}),\n}\n\nexport default Button\n",["138","139"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\CustomInput.ts",["140"],"import { theme } from \"@chakra-ui/react\"\n\nconst CustomInput = {\n    // ...theme.components.Input,\n\n    baseStyle: ({ colorMode, isActive, ...props }: any) => {\n        console.log(\"props: \", props)\n        return {\n            bg: colorMode === \"dark\" ? \"red\" : \"#C8E9F6\",\n            color: colorMode === \"dark\" ? \"white\" : \"black\",\n            fontWeight: isActive ? \"bold\" : \"normal\",\n            _active: {\n                bg: colorMode === \"dark\" ? \"#216078\" : \"#8FC4D9\",\n            },\n            _hover: {\n                bg: colorMode === \"dark\" ? \"#1B5658\" : \"#9CE3FF\",\n            },\n        }\n    },\n    // Two variants: outline and solid\n    variants: {\n        outline: {\n            border: \"2px solid\",\n            borderColor: \"purple.500\",\n            color: \"purple.500\",\n        },\n        solid: {\n            background: \"green\",\n            color: \"red\",\n        },\n    },\n\n    // The default size and variant values\n    defaultProps: {\n        size: \"md\",\n        variant: \"solid\",\n    },\n}\n\nexport default CustomInput\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\index.ts",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\CustomButton.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Profil\\Profil.tsx",["141","142","143","144"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Ingredients\\ingredient.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Discovery\\Discovery.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Recipes\\recipes.tsx",["145","146","147","148"],"import {\n    Box,\n    Flex,\n    Grid,\n    GridItem,\n    HStack,\n    Heading,\n    IconButton,\n    Image,\n    List,\n    ListItem,\n    Popover,\n    PopoverArrow,\n    PopoverBody,\n    PopoverCloseButton,\n    PopoverContent,\n    PopoverHeader,\n    PopoverTrigger,\n    Select,\n    Text,\n    UnorderedList,\n} from \"@chakra-ui/react\"\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\"\nimport { faStar as faStarRegular } from \"@fortawesome/free-regular-svg-icons\"\nimport {\n    faConciergeBell,\n    faFireAlt,\n    faPrint,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { capitalize } from \"lodash\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\n\nimport { MetricListItem } from \"../../components/MetricListItem\"\nimport { RecipesDataContext } from \"../../context/DataContext\"\nimport { useRealmApp } from \"../../context/userContext\"\nimport {\n    RecipesData,\n    RecipesImages,\n    RecipiesIngredients,\n} from \"../../types/recipes\"\n\ntype ingredientsListType = (RecipiesIngredients & { selected: boolean })[]\n\nexport default function Recipies() {\n    const { id } = useParams()\n    const navigate = useNavigate()\n    const recipesData = useContext<RecipesData>(RecipesDataContext)\n    const [recipeAmount, setRecipeAmount] = useState(1)\n    const [ingredientsList, setIngredientsList] = useState<ingredientsListType>(\n        []\n    )\n\n    const app = useRealmApp()\n\n    const updateSelectedState = (newState: boolean, index: number) => {\n        const t = [...ingredientsList]\n        t[index].selected = newState\n        setIngredientsList(t)\n    }\n\n    useEffect(() => {\n        if (recipesData === null || JSON.stringify(recipesData) === \"{}\") {\n            navigate(\"/\")\n        }\n    }, [recipesData, navigate])\n\n    const currentIngredient = recipesData.hits?.find(\n        (hit) => hit.recipe.id === id\n    )\n    // console.log(\"currentIngredient: \", currentIngredient)\n\n    // Authticate user in Realm\n    //      Use realm-web to authenticate user\n    //      If user is not authenticated, redirect to login page\n    //      If user is authenticated, continue\n    //      If user is authenticated, get user data from Realm\n    // Read user data from Realm\n    // Update Userdata from Realm\n    // Delete user data from Realm\n\n    const addFavoriteRecipe = async () => {\n        // Access a logged in user's read-only custom data\n        // app.currentUser?.refreshCustomData()\n        // const customData = app.currentUser?.customData\n        // console.log(customData)\n\n        const updateUser = {\n            query: {\n                email: app.currentUser?.profile.email,\n                favoriteRecipes: {\n                    $not: { $in: [currentIngredient?.recipe.id] },\n                },\n            },\n            update: {\n                $push: {\n                    favoriteRecipes: currentIngredient?.recipe.id,\n                },\n            },\n            options: { upsert: false },\n        }\n\n        try {\n            const mongodb = app.currentUser?.mongoClient(\"mongodb-atlas\")\n            const usersCollection = mongodb?.db(\"salvare\").collection(\"users\")\n\n            // console.log(\"users collection: \", await usersCollection?.find())\n\n            // Updates the user's custom data\n            await usersCollection?.updateOne(\n                updateUser.query,\n                updateUser.update,\n                updateUser.options\n            )\n\n            // Inserts recipie into recipies collection\n            await app.currentUser?.functions.insertRecipie(\n                currentIngredient?.recipe\n            )\n        } catch (err) {\n            console.error(err)\n        }\n    }\n\n    useEffect(() => {\n        if (currentIngredient !== undefined) {\n            setIngredientsList(\n                currentIngredient?.recipe.ingredients.map((item) => {\n                    return { ...item, selected: false }\n                })\n            )\n        }\n    }, [currentIngredient, currentIngredient?.recipe.ingredients])\n\n    if (currentIngredient === undefined) return <></>\n\n    const totalNutrients = Object.values(\n        currentIngredient?.recipe.totalNutrients\n    ).filter((item) => item.quantity !== 0)\n\n    const macroAcides = [\"Fat\", \"Energy\", \"Carbs\", \"Fiber\", \"Protein\"]\n    const primaryNutrients = totalNutrients.filter((item, index) =>\n        macroAcides.includes(item.label)\n    )\n    const filteredNutrients = totalNutrients\n        .filter((item) => !macroAcides.includes(item.label))\n        .sort((a, b) => {\n            if (a.unit === \"g\") return -1\n\n            if (a.unit === b.unit) {\n                return b.quantity - a.quantity\n            }\n\n            if (\n                (a.unit === \"g\" && b.unit !== a.unit) ||\n                (a.unit === \"mg\" && b.unit !== a.unit)\n            ) {\n                return -1\n            } else return 1\n        })\n\n    const label = currentIngredient.recipe.label\n\n    const pickLargesImage = (images: RecipesImages) => {\n        if (images === undefined) return \"placeholder.png\"\n        const imagesArray = Object.values(images)\n        // @ts-ignore\n        const sorted = imagesArray.sort((a, b) => b.width - a.width)\n        // @ts-ignore\n        return sorted[0].url\n    }\n\n    function NutritionGridItem(index: number, subarray: typeof totalNutrients) {\n        return (\n            <GridItem key={index}>\n                <List>\n                    {subarray.map((nutrient, index) => (\n                        <MetricListItem\n                            key={index + nutrient.label}\n                            type={nutrient.label}\n                            metric={nutrient.quantity}\n                            unit={nutrient.unit}\n                        />\n                    ))}\n                </List>\n            </GridItem>\n        )\n    }\n\n    function SplitNutritionGrid(\n        nutrietnsArray: typeof totalNutrients,\n        numberOfSplits: number\n    ) {\n        const ListItemAmount = Math.floor(\n            nutrietnsArray.length / numberOfSplits\n        )\n\n        const subArrys = new Array(numberOfSplits)\n            .fill(1)\n            .map((item, index) =>\n                nutrietnsArray.slice(\n                    index * ListItemAmount,\n                    (index + 1) * ListItemAmount\n                )\n            )\n\n        return subArrys.map((nutrient, index, array) => (\n            <GridItem key={index}>\n                <List>{NutritionGridItem(index, nutrient)}</List>\n            </GridItem>\n        ))\n    }\n\n    return (\n        <Box as=\"section\" p=\"4\" pb=\"200\" mt=\"10\">\n            <Flex\n                maxW={1600}\n                mx=\"auto\"\n                alignItems=\"start\"\n                justify=\"space-between\"\n                w=\"100%\"\n                gap=\"20\"\n            >\n                <Box flexBasis={600} flexGrow={1}>\n                    <Flex justify=\"space-between\">\n                        <Heading>{label}</Heading>\n                        <HStack spacing={4}>\n                            <IconButton\n                                bg=\"buttonBg\"\n                                aria-label=\"add to favorites\"\n                                size=\"lg\"\n                                title=\"add to favorites\"\n                                isRound\n                                color=\"buttonIcon\"\n                                _hover={{ bg: \"buttonBgHover\" }}\n                                icon={<FontAwesomeIcon icon={faStarRegular} />}\n                                onClick={addFavoriteRecipe}\n                            />\n                            <IconButton\n                                bg=\"buttonBg\"\n                                aria-label=\"Print\"\n                                size=\"lg\"\n                                title=\"Print\"\n                                isRound\n                                color=\"buttonIcon\"\n                                _hover={{ bg: \"buttonBgHover\" }}\n                                icon={<FontAwesomeIcon icon={faPrint} />}\n                                onClick={() => {\n                                    window.print()\n                                }}\n                            />\n                        </HStack>\n                    </Flex>\n                    <HStack spacing={6} mt=\"5\">\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"buttonIcon\"\n                                icon={faClock}\n                            />\n                            <Text fontSize=\"lg\">\n                                {currentIngredient.recipe.totalTime} min\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon size=\"2x\" icon={faFireAlt} />\n                            <Text fontSize=\"lg\">\n                                {Math.round(currentIngredient.recipe.calories)}{\" \"}\n                                cal\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon size=\"2x\" icon={faConciergeBell} />\n                            <Text fontSize=\"lg\">\n                                {currentIngredient.recipe.yield} Portions\n                            </Text>\n                        </HStack>\n                    </HStack>\n                    <Flex justify=\"end\">\n                        <Select\n                            placeholder=\"Select option\"\n                            w=\"200\"\n                            bg=\"buttonBg\"\n                            border=\"none\"\n                            onChange={(e) => {\n                                setRecipeAmount(Number(e.target.value))\n                            }}\n                        >\n                            <option selected value=\"1\">\n                                Person 1\n                            </option>\n                            <option value=\"2\">Person 2</option>\n                            <option value=\"3\">Person 3</option>\n                            <option value=\"4\">Person 4</option>\n                            <option value=\"5\">Person 5</option>\n                            <option value=\"6\">Person 6</option>\n                            <option value=\"7\">Person 7</option>\n                            <option value=\"8\">Person 8</option>\n                        </Select>\n                    </Flex>\n                    <Box>\n                        {ingredientsList?.map((ingredient, index) => {\n                            const quantity =\n                                ingredient.quantity === 0\n                                    ? Number(ingredient.weight.toFixed(2))\n                                    : Number(ingredient.quantity.toFixed(2))\n\n                            const unit =\n                                ingredient.measure === \"<unit>\"\n                                    ? \"\"\n                                    : ingredient.quantity === 0\n                                    ? \"g\"\n                                    : ingredient.measure\n\n                            const IngredientSum = (\n                                recipeAmount * quantity\n                            ).toFixed(2)\n\n                            return (\n                                <Popover trigger=\"hover\" isLazy>\n                                    <PopoverTrigger>\n                                        <Grid\n                                            bg={\n                                                ingredient.selected\n                                                    ? \"buttonBgSelected\"\n                                                    : \"buttonBg\"\n                                            }\n                                            p=\"4\"\n                                            templateColumns=\"10% 1fr 20%\"\n                                            alignItems=\"center\"\n                                            w=\"100%\"\n                                            minW=\"600\"\n                                            borderRadius={4}\n                                            my=\"4\"\n                                            _hover={{\n                                                bg: \"buttonBgHover\",\n                                                cursor: \"pointer\",\n                                            }}\n                                            onClick={() => {\n                                                updateSelectedState(\n                                                    !ingredient.selected,\n                                                    index\n                                                )\n                                            }}\n                                        >\n                                            <Box\n                                                w=\"4\"\n                                                h=\"4\"\n                                                borderRadius=\"50%\"\n                                                border=\"2px solid\"\n                                                borderColor=\"buttonIcon\"\n                                                bg={\n                                                    ingredient.selected\n                                                        ? \"buttonIcon\"\n                                                        : \"white\"\n                                                }\n                                            ></Box>\n                                            <Text fontSize=\"lg\">\n                                                {capitalize(ingredient.food)}\n                                            </Text>\n                                            <Text fontSize=\"lg\" color=\"muted\">\n                                                {IngredientSum} {unit}\n                                            </Text>\n                                        </Grid>\n                                    </PopoverTrigger>\n                                    <PopoverContent maxW=\"250\" p=\"4\">\n                                        <List>\n                                            {primaryNutrients.map(\n                                                (nutrient, index) => (\n                                                    <MetricListItem\n                                                        key={\n                                                            nutrient.label +\n                                                            index\n                                                        }\n                                                        type={nutrient.label}\n                                                        metric={\n                                                            nutrient.quantity\n                                                        }\n                                                        unit={nutrient.unit}\n                                                        flexGrow={1}\n                                                    />\n                                                )\n                                            )}\n                                        </List>\n                                    </PopoverContent>\n                                </Popover>\n                            )\n                        })}\n                    </Box>\n\n                    <Box fontSize=\"2xl\" mt=\"50\">\n                        <Heading as=\"h2\" my=\"4\">\n                            Recipe Description{\" \"}\n                        </Heading>\n                        <UnorderedList>\n                            {currentIngredient.recipe.ingredientLines.map(\n                                (line) => {\n                                    return <ListItem>{line}</ListItem>\n                                }\n                            )}\n                        </UnorderedList>\n                    </Box>\n                </Box>\n                <Box minW={300} maxW={600} flexGrow={1}>\n                    <Image\n                        src={\n                            pickLargesImage(\n                                currentIngredient?.recipe?.images\n                            ) as unknown as string\n                        }\n                        width=\"100%\"\n                        fallbackSrc=\"placeholder.png\"\n                        alt=\"hey\"\n                    />\n                    <Box maxW={1600} mx=\"auto\">\n                        <Text my=\"5\" fontWeight=\"bold\">\n                            Per 100 g\n                        </Text>\n                        <Grid\n                            gap={2}\n                            gridTemplateColumns=\"repeat(auto-fill, minmax(200px, 1fr))\"\n                        >\n                            <List>\n                                {primaryNutrients.map((nutrient, index) => (\n                                    <MetricListItem\n                                        key={nutrient.label + index}\n                                        type={nutrient.label}\n                                        metric={nutrient.quantity}\n                                        unit={nutrient.unit}\n                                        flexGrow={1}\n                                    />\n                                ))}\n                            </List>\n\n                            {SplitNutritionGrid(filteredNutrients, 3)}\n                        </Grid>\n                    </Box>\n                </Box>\n            </Flex>\n        </Box>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\index.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Landing\\landing.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Discovery\\index.ts",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Profil\\index.ts",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Ingredients\\index.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\pages\\Recipes\\index.tsx",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":14,"column":5,"nodeType":"155","messageId":"156","endLine":14,"endColumn":15},{"ruleId":"153","severity":1,"message":"157","line":1,"column":30,"nodeType":"155","messageId":"156","endLine":1,"endColumn":36},{"ruleId":"153","severity":1,"message":"158","line":21,"column":29,"nodeType":"155","messageId":"156","endLine":21,"endColumn":40},{"ruleId":"153","severity":1,"message":"159","line":26,"column":10,"nodeType":"155","messageId":"156","endLine":26,"endColumn":24},{"ruleId":"153","severity":1,"message":"160","line":40,"column":10,"nodeType":"155","messageId":"156","endLine":40,"endColumn":27},{"ruleId":"153","severity":1,"message":"161","line":345,"column":12,"nodeType":"155","messageId":"156","endLine":345,"endColumn":25},{"ruleId":"153","severity":1,"message":"162","line":345,"column":27,"nodeType":"155","messageId":"156","endLine":345,"endColumn":43},{"ruleId":"153","severity":1,"message":"163","line":1,"column":37,"nodeType":"155","messageId":"156","endLine":1,"endColumn":43},{"ruleId":"153","severity":1,"message":"164","line":17,"column":7,"nodeType":"155","messageId":"156","endLine":17,"endColumn":13},{"ruleId":"153","severity":1,"message":"165","line":1,"column":10,"nodeType":"155","messageId":"156","endLine":1,"endColumn":15},{"ruleId":"149","replacedBy":"166"},{"ruleId":"151","replacedBy":"167"},{"ruleId":"153","severity":1,"message":"165","line":1,"column":10,"nodeType":"155","messageId":"156","endLine":1,"endColumn":15},{"ruleId":"153","severity":1,"message":"168","line":13,"column":10,"nodeType":"155","messageId":"156","endLine":13,"endColumn":14},{"ruleId":"153","severity":1,"message":"169","line":13,"column":16,"nodeType":"155","messageId":"156","endLine":13,"endColumn":24},{"ruleId":"153","severity":1,"message":"170","line":42,"column":11,"nodeType":"155","messageId":"156","endLine":42,"endColumn":19},{"ruleId":"153","severity":1,"message":"171","line":43,"column":11,"nodeType":"155","messageId":"156","endLine":43,"endColumn":19},{"ruleId":"153","severity":1,"message":"172","line":13,"column":5,"nodeType":"155","messageId":"156","endLine":13,"endColumn":17},{"ruleId":"153","severity":1,"message":"173","line":14,"column":5,"nodeType":"155","messageId":"156","endLine":14,"endColumn":16},{"ruleId":"153","severity":1,"message":"174","line":15,"column":5,"nodeType":"155","messageId":"156","endLine":15,"endColumn":23},{"ruleId":"153","severity":1,"message":"175","line":17,"column":5,"nodeType":"155","messageId":"156","endLine":17,"endColumn":18},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"@typescript-eslint/no-unused-vars","'useBoolean' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useCallback' is defined but never used.","'useCurrentUser' is defined but never used.","'useAnonymousLogin' is defined but never used.","'isPopoverOpen' is assigned a value but never used.","'setIsPopoverOpen' is assigned a value but never used.","'Method' is defined but never used.","'colors' is assigned a value but never used.","'theme' is defined but never used.",["176"],["177"],"'Link' is defined but never used.","'Navigate' is defined but never used.","'location' is assigned a value but never used.","'navigate' is assigned a value but never used.","'PopoverArrow' is defined but never used.","'PopoverBody' is defined but never used.","'PopoverCloseButton' is defined but never used.","'PopoverHeader' is defined but never used.","no-global-assign","no-unsafe-negation"]
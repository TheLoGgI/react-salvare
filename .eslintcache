[{"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx":"1","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx":"2","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx":"3","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx":"4","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx":"5","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\ingredient.tsx":"6","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\recipes.tsx":"7","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx":"8","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts":"9","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx":"10","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx":"11","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx":"12","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx":"13","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx":"14","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx":"15","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx":"16","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\profil.tsx":"17","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\index.ts":"18","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\Discovery.tsx":"19"},{"size":714,"mtime":1644169951764,"results":"20","hashOfConfig":"21"},{"size":941,"mtime":1644170027639,"results":"22","hashOfConfig":"21"},{"size":652,"mtime":1644165022712,"results":"23","hashOfConfig":"21"},{"size":2258,"mtime":1643839875617,"results":"24","hashOfConfig":"21"},{"size":5110,"mtime":1644170243864,"results":"25","hashOfConfig":"21"},{"size":2007,"mtime":1644170199009,"results":"26","hashOfConfig":"21"},{"size":15018,"mtime":1643242195392,"results":"27","hashOfConfig":"21"},{"size":991,"mtime":1644170211215,"results":"28","hashOfConfig":"21"},{"size":4325,"mtime":1644101010474,"results":"29","hashOfConfig":"21"},{"size":4084,"mtime":1644170134987,"results":"30","hashOfConfig":"21"},{"size":899,"mtime":1644152503114,"results":"31","hashOfConfig":"21"},{"size":558,"mtime":1642037679206,"results":"32","hashOfConfig":"21"},{"size":1783,"mtime":1643834856422,"results":"33","hashOfConfig":"21"},{"size":12398,"mtime":1644170059027,"results":"34","hashOfConfig":"21"},{"size":1458,"mtime":1642463186141,"results":"35","hashOfConfig":"36"},{"size":1318,"mtime":1642958659578,"results":"37","hashOfConfig":"21"},{"size":145,"mtime":1642965808187,"results":"38","hashOfConfig":"21"},{"size":1019,"mtime":1644169971990,"results":"39","hashOfConfig":"21"},{"size":5991,"mtime":1644165895280,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qd1rg2",{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"nmj2ys",{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\index.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\App.tsx",["84","85","86"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\ThemeContext.tsx",[],["87","88"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\DataContext.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Header.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\ingredient.tsx",["89","90"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\recipes.tsx",["91"],"import {\n    Box,\n    Flex,\n    Grid,\n    GridItem,\n    HStack,\n    Heading,\n    IconButton,\n    Image,\n    List,\n    ListItem,\n    OrderedList,\n    Select,\n    Text,\n    UnorderedList,\n} from \"@chakra-ui/react\"\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\"\nimport { faStar as faStarRegular } from \"@fortawesome/free-regular-svg-icons\"\nimport {\n    faConciergeBell,\n    faFireAlt,\n    faPrint,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { capitalize } from \"lodash\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { useNavigate, useParams } from \"react-router-dom\"\n\nimport { MetricListItem } from \"../components/MetricListItem\"\nimport { RecipesDataContext } from \"../context/DataContext\"\nimport {\n    RecipesData,\n    RecipesImages,\n    RecipiesIngredients,\n} from \"../types/recipes\"\n\ntype ingredientsListType = (RecipiesIngredients & { selected: boolean })[]\n\nexport default function Recipies() {\n    const { id } = useParams()\n    const navigate = useNavigate()\n    const recipesData = useContext<RecipesData>(RecipesDataContext)\n    const [recipeAmount, setRecipeAmount] = useState(1)\n    const [ingredientsList, setIngredientsList] = useState<ingredientsListType>(\n        []\n    )\n\n    const updateSelectedState = (newState: boolean, index: number) => {\n        const t = [...ingredientsList]\n        t[index].selected = newState\n        setIngredientsList(t)\n    }\n\n    useEffect(() => {\n        if (recipesData === null || JSON.stringify(recipesData) === \"{}\") {\n            navigate(\"/\")\n        }\n    }, [recipesData, navigate])\n\n    const currentIngredient = recipesData.hits?.find(\n        (hit) => hit.recipe.id === id\n    )\n\n    useEffect(() => {\n        if (currentIngredient !== undefined) {\n            setIngredientsList(\n                currentIngredient?.recipe.ingredients.map((item) => {\n                    return { ...item, selected: false }\n                })\n            )\n        }\n    }, [currentIngredient, currentIngredient?.recipe.ingredients])\n\n    if (currentIngredient === undefined) return <></>\n\n    const totalNutrients = Object.values(\n        currentIngredient?.recipe.totalNutrients\n    ).filter((item) => item.quantity !== 0)\n\n    const macroAcides = [\"Fat\", \"Energy\", \"Carbs\", \"Fiber\", \"Protein\"]\n    const primaryNutrients = totalNutrients.filter((item, index) =>\n        macroAcides.includes(item.label)\n    )\n    const filteredNutrients = totalNutrients\n        .filter((item) => !macroAcides.includes(item.label))\n        .sort((a, b) => {\n            if (a.unit === \"g\") return -1\n\n            if (a.unit === b.unit) {\n                return b.quantity - a.quantity\n            }\n\n            if (\n                (a.unit === \"g\" && b.unit !== a.unit) ||\n                (a.unit === \"mg\" && b.unit !== a.unit)\n            ) {\n                return -1\n            } else return 1\n        })\n\n    const label = currentIngredient.recipe.label\n\n    const pickLargesImage = (images: RecipesImages) => {\n        if (images === undefined) return \"placeholder.png\"\n        const imagesArray = Object.values(images)\n        // @ts-ignore\n        const sorted = imagesArray.sort((a, b) => b.width - a.width)\n        // @ts-ignore\n        return sorted[0].url\n    }\n\n    function NutritionGridItem(index: number, subarray: typeof totalNutrients) {\n        return (\n            <GridItem key={index}>\n                <List color=\"blue.50\">\n                    {subarray.map((nutrient, index) => (\n                        <MetricListItem\n                            key={index + nutrient.label}\n                            type={nutrient.label}\n                            metric={nutrient.quantity}\n                            unit={nutrient.unit}\n                        />\n                    ))}\n                </List>\n            </GridItem>\n        )\n    }\n\n    function SplitNutritionGrid(\n        nutrietnsArray: typeof totalNutrients,\n        numberOfSplits: number\n    ) {\n        const ListItemAmount = Math.floor(\n            nutrietnsArray.length / numberOfSplits\n        )\n\n        const subArrys = new Array(numberOfSplits)\n            .fill(1)\n            .map((item, index) =>\n                nutrietnsArray.slice(\n                    index * ListItemAmount,\n                    (index + 1) * ListItemAmount\n                )\n            )\n\n        return subArrys.map((nutrient, index, array) => (\n            <GridItem key={index}>\n                <List color=\"blue.50\">\n                    {NutritionGridItem(index, nutrient)}\n                </List>\n            </GridItem>\n        ))\n    }\n\n    return (\n        <Box as=\"main\" bg=\"#1A2C33\" p=\"4\" pb=\"200\" mt=\"10\">\n            <Flex\n                maxW={1600}\n                mx=\"auto\"\n                alignItems=\"start\"\n                justify=\"space-between\"\n                w=\"100%\"\n                gap=\"20\"\n            >\n                <Box flexBasis={600} flexGrow={1}>\n                    <Flex justify=\"space-between\">\n                        <Heading color=\"blue.50\">{label}</Heading>\n                        <HStack spacing={4}>\n                            <IconButton\n                                // colorScheme=\"teal\"\n                                bg=\"#335563\"\n                                aria-label=\"add to favorites\"\n                                size=\"lg\"\n                                title=\"add to favorites\"\n                                isRound\n                                _hover={{ bg: \"teal\" }}\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1A2C33\"\n                                        icon={faStarRegular}\n                                    />\n                                }\n                                onClick={() => {\n                                    console.log(\"add to favorites\")\n                                }}\n                            />\n                            <IconButton\n                                // colorScheme=\"teal\"\n                                bg=\"#335563\"\n                                aria-label=\"Print\"\n                                size=\"lg\"\n                                title=\"Print\"\n                                isRound\n                                _hover={{ bg: \"teal\" }}\n                                icon={\n                                    <FontAwesomeIcon\n                                        color=\"#1A2C33\"\n                                        icon={faPrint}\n                                    />\n                                }\n                                onClick={() => {\n                                    window.print()\n                                }}\n                            />\n                        </HStack>\n                    </Flex>\n                    <HStack spacing={6} mt=\"5\">\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faClock}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {currentIngredient.recipe.totalTime} min\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faFireAlt}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {Math.round(currentIngredient.recipe.calories)}{\" \"}\n                                cal\n                            </Text>\n                        </HStack>\n                        <HStack spacing={2}>\n                            <FontAwesomeIcon\n                                size=\"2x\"\n                                color=\"#859EA8\"\n                                icon={faConciergeBell}\n                            />\n                            <Text color=\"#859EA8\" fontSize=\"lg\">\n                                {currentIngredient.recipe.yield} Portions\n                            </Text>\n                        </HStack>\n                    </HStack>\n                    <Flex justify=\"end\">\n                        <Select\n                            placeholder=\"Select option\"\n                            w=\"200\"\n                            bg=\"#26404A\"\n                            border=\"none\"\n                            color=\"white\"\n                            colorScheme=\"teal\"\n                            onChange={(e) => {\n                                setRecipeAmount(Number(e.target.value))\n                            }}\n                        >\n                            <option selected value=\"1\">\n                                Person 1\n                            </option>\n                            <option value=\"2\">Person 2</option>\n                            <option value=\"3\">Person 3</option>\n                            <option value=\"4\">Person 4</option>\n                            <option value=\"5\">Person 5</option>\n                            <option value=\"6\">Person 6</option>\n                            <option value=\"7\">Person 7</option>\n                            <option value=\"8\">Person 8</option>\n                        </Select>\n                    </Flex>\n                    <Box>\n                        {ingredientsList?.map((ingredient, index) => {\n                            const quantity =\n                                ingredient.quantity === 0\n                                    ? Number(ingredient.weight.toFixed(2))\n                                    : Number(ingredient.quantity.toFixed(2))\n                            console.log(\n                                \"ingredient.measure : \",\n                                ingredient.measure\n                            )\n                            const unit =\n                                ingredient.measure === \"<unit>\"\n                                    ? \"\"\n                                    : ingredient.quantity === 0\n                                    ? \"g\"\n                                    : ingredient.measure\n\n                            const IngredientSum = recipeAmount * quantity\n\n                            return (\n                                <Grid\n                                    bg={\n                                        ingredient.selected\n                                            ? \"#00506f\"\n                                            : \"#26404A\"\n                                    }\n                                    color=\"white\"\n                                    p=\"4\"\n                                    templateColumns=\"10% 1fr 20%\"\n                                    alignItems=\"center\"\n                                    w=\"100%\"\n                                    minW=\"600\"\n                                    borderRadius={4}\n                                    my=\"4\"\n                                    _hover={{\n                                        bg: \"#2b5869\",\n                                        cursor: \"pointer\",\n                                    }}\n                                    onClick={() => {\n                                        updateSelectedState(\n                                            !ingredient.selected,\n                                            index\n                                        )\n                                    }}\n                                >\n                                    <Box\n                                        w=\"4\"\n                                        h=\"4\"\n                                        borderRadius=\"50%\"\n                                        border=\"2px solid teal\"\n                                        bg={\n                                            ingredient.selected\n                                                ? \"teal\"\n                                                : \"white\"\n                                        }\n                                    ></Box>\n                                    <Text fontSize=\"lg\">\n                                        {capitalize(ingredient.food)}\n                                    </Text>\n                                    <Text fontSize=\"lg\" color=\"gray.300\">\n                                        {IngredientSum} {unit}\n                                    </Text>\n                                </Grid>\n                            )\n                        })}\n                    </Box>\n\n                    <Box fontSize=\"2xl\" color=\"white\" mt=\"50\">\n                        <Heading as=\"h2\" my=\"4\">\n                            Recipe Description{\" \"}\n                        </Heading>\n                        <UnorderedList>\n                            {currentIngredient.recipe.ingredientLines.map(\n                                (line) => {\n                                    return <ListItem>{line}</ListItem>\n                                }\n                            )}\n                        </UnorderedList>\n                    </Box>\n                </Box>\n                <Box minW={300} maxW={600} flexGrow={1}>\n                    <Image\n                        src={\n                            pickLargesImage(\n                                currentIngredient?.recipe?.images\n                            ) as unknown as string\n                        }\n                        width=\"100%\"\n                        fallbackSrc=\"placeholder.png\"\n                        alt=\"hey\"\n                    />\n                    <Box maxW={1600} mx=\"auto\">\n                        <Text color=\"blue.50\" my=\"5\" fontWeight=\"bold\">\n                            Per 100 g\n                        </Text>\n                        <Grid\n                            gap={2}\n                            gridTemplateColumns=\"repeat(auto-fill, minmax(200px, 1fr))\"\n                        >\n                            <List color=\"blue.50\">\n                                {primaryNutrients.map((nutrient, index) => (\n                                    <MetricListItem\n                                        key={nutrient.label + index}\n                                        type={nutrient.label}\n                                        metric={nutrient.quantity}\n                                        unit={nutrient.unit}\n                                        flexGrow={1}\n                                    />\n                                ))}\n                            </List>\n\n                            {SplitNutritionGrid(filteredNutrients, 3)}\n                        </Grid>\n                    </Box>\n                </Box>\n            </Flex>\n        </Box>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Card.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useRequests.ts",["92"],"import { useEffect, useMemo, useRef, useState } from \"react\"\n\nimport {\n    FoodDataHintsType,\n    FoodDataType,\n    useFoodRequest,\n} from \"../types/ingredients\"\nimport { RecipesData, RecipesDataHints } from \"../types/recipes\"\nimport useFetch from \"./useFetch\"\n\ntype PaginationDetails = {\n    pagesPerPage: number\n    numberOfPages: number\n    currentPage: number\n}\nconst RECIPES_API_ID = process.env.REACT_APP_API_RECIPES_ID\nconst RECIPES_API_KEY = process.env.REACT_APP_API_RECIPES_KEY\n\nexport function useRecipies(\n    search: string,\n    accumaltivePagination: boolean\n): useFoodRequest<RecipesData> {\n    const [pagination, setPagination] = useState<\n        Map<string, Array<RecipesDataHints[]>>\n    >(new Map())\n    const [recipieUrl, setRecipieUrl] = useState<string>(\"\")\n\n    const fetchOptions: RequestInit = useMemo(() => {\n        return { method: \"GET\", mode: \"cors\" }\n    }, [])\n\n    const { data: recipiesData, ...rest } = useFetch<RecipesData>(\n        recipieUrl,\n        fetchOptions\n    )\n\n    const pages = useMemo<PaginationDetails>(() => {\n        if (recipiesData === null || recipiesData.count === 0) {\n            return { pagesPerPage: 0, numberOfPages: 0, currentPage: 0 }\n        }\n\n        const pagesPerPage = recipiesData.to - recipiesData.from + 1\n        const numberOfPages = recipiesData.count / pagesPerPage\n        const currentPage = recipiesData.from / pagesPerPage\n\n        return {\n            pagesPerPage,\n            numberOfPages,\n            currentPage,\n        }\n    }, [recipiesData])\n\n    const next = () => {\n        const nextRecipieLink = recipiesData?._links.next.href\n        if (nextRecipieLink) {\n            setRecipieUrl(nextRecipieLink)\n        }\n    }\n\n    useEffect(() => {\n        setRecipieUrl(\n            `https://api.edamam.com/api/recipes/v2?type=public&q=${search}&app_id=${RECIPES_API_ID}&app_key=${RECIPES_API_KEY}`\n        )\n    }, [search])\n\n    useEffect(() => {\n        const searchTerm = search.toLowerCase()\n\n        if (recipiesData !== null && recipiesData.count > 0) {\n            const tempPag = new Map(pagination)\n            const tempValue = tempPag.get(searchTerm) || []\n            tempValue.push(recipiesData.hits)\n            tempPag.set(searchTerm, tempValue)\n            setPagination(tempPag)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [recipiesData])\n\n    if (recipiesData === null) {\n        return {\n            next,\n            data: {\n                from: 1,\n                to: 1,\n                count: 0,\n                _links: {\n                    next: {\n                        href: \"\",\n                        title: \"Error\",\n                    },\n                },\n                hits: [],\n            },\n            ...rest,\n        }\n    }\n\n    const paginatedData = pagination.get(search)?.flat() || []\n    const mappedHits = paginatedData.map((hit: any) => {\n        hit!.recipe.id = hit!.recipe.uri.split(\"#\")[1]!\n        return hit\n    })\n    // console.log(\"mappedHits: \", mappedHits)\n\n    return {\n        data: {\n            ...recipiesData,\n            hits: mappedHits as RecipesDataHints[],\n        },\n        next,\n        ...pages,\n        ...rest,\n    }\n}\n\nexport function useFood(search: string): useFoodRequest<FoodDataHintsType[]> {\n    const FOOD_API_ID = process.env.REACT_APP_API_FOOD_DATABASE_ID\n    const FOOD_API_KEY = process.env.REACT_APP_API_FOOD_DATABASE_KEY\n\n    const url = `https://api.edamam.com/api/food-database/parser?ingr=${search}&app_id=${FOOD_API_ID}&app_key=${FOOD_API_KEY}`\n    const { data: foodData, ...rest } = useFetch<FoodDataType>(url)\n\n    const next = () => {\n        // const nextRecipieLink = recipiesData?._links.next.href\n        // if (nextRecipieLink) {\n        //     // setRecipieUrl(nextRecipieLink)\n        // }\n    }\n\n    if (foodData === undefined || foodData === null) {\n        return { data: [], next, ...rest }\n    }\n\n    // const filterRegex = new RegExp(search, \"gi\")\n    // const searchItems = foodData?.hints.filter((item) =>\n    //     filterRegex.test(item.food.label)\n    // )\n    // console.log(\"searchItems: \", searchItems)\n\n    return { data: foodData.hints, next, ...rest }\n}\n\n// https://api.edamam.com/api/food-database/parser?ingr=beans&app_id=7a6b01ff&app_key=c9cab2012ffacc8a812f6746ac47a614\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\Search.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MenuIcon.tsx",["93"],"import { IconButton, useColorModeValue } from \"@chakra-ui/react\"\nimport {\n    IconDefinition,\n    IconName,\n    IconPrefix,\n} from \"@fortawesome/fontawesome-svg-core\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Link } from \"react-router-dom\"\n\ntype MenuIconPropsType = {\n    icon: IconDefinition | [IconPrefix, IconName]\n    to: string\n    label?: string\n    title: string\n}\n\nexport default function MenuIcon({\n    icon,\n    to,\n    label = \"\",\n    title,\n}: MenuIconPropsType) {\n    // const text = useColorModeValue(\"#B4DCEC\", \"white\")\n    return (\n        <Link className=\"menulink-symbol\" to={to}>\n            <IconButton\n                colorScheme=\"teal\"\n                aria-label={label}\n                size=\"lg\"\n                title={title}\n                isRound\n                icon={<FontAwesomeIcon icon={icon} />}\n            />\n        </Link>\n    )\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\MetricListItem.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useFetch.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\components\\LoginModal.tsx",["94","95","96","97"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\hooks\\useAxiosFetch.tsx",["98"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\context\\userContext.tsx",["99","100"],"import React, { createContext, useContext, useEffect, useState } from \"react\"\nimport * as Realm from \"realm-web\"\n\nimport { ContextProviderProps } from \"./ThemeContext\"\n\nexport const CurrentUserContext = createContext<any>({})\nexport const UpdateCurrentUserContext = createContext<any>({})\n\n// export const MongoAppContext = createContext<App>({})\n// export const UpdateMongoAppContext = createContext<App>({})\n\nexport default function UserMongoContext({ children }: ContextProviderProps) {\n    const [currentUser, setCurrentUser] = useState()\n    // const [mongoApp, setMognoApp] = useState()\n\n    return (\n        <CurrentUserContext.Provider value={currentUser}>\n            <UpdateCurrentUserContext.Provider value={setCurrentUser}>\n                {/* <MongoAppContext.Provider value={mongoApp}>\n                    <UpdateMongoAppContext.Provider value={setMognoApp}> */}\n                {children}\n                {/* </UpdateMongoAppContext.Provider>\n                </MongoAppContext.Provider> */}\n            </UpdateCurrentUserContext.Provider>\n        </CurrentUserContext.Provider>\n    )\n}\n\nexport function useRealmApp() {\n    return Realm.App.getApp(\"salvare-foodapp-iwodd\")\n}\n\nexport function useCurrentUser() {\n    const app = new Realm.App({ id: \"salvare-foodapp-iwodd\" })\n    return app.currentUser\n}\n","C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\profil.tsx",[],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\theme\\index.ts",["101"],"C:\\Users\\lasse\\OneDrive\\Coding\\JavaScript\\NodeJs\\react-food\\src\\routes\\Discovery.tsx",[],{"ruleId":"102","severity":1,"message":"103","line":1,"column":10,"nodeType":"104","messageId":"105","endLine":1,"endColumn":13},{"ruleId":"102","severity":1,"message":"106","line":1,"column":15,"nodeType":"104","messageId":"105","endLine":1,"endColumn":27},{"ruleId":"102","severity":1,"message":"107","line":11,"column":11,"nodeType":"104","messageId":"105","endLine":11,"endColumn":13},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"102","severity":1,"message":"112","line":2,"column":22,"nodeType":"104","messageId":"105","endLine":2,"endColumn":31},{"ruleId":"102","severity":1,"message":"113","line":3,"column":10,"nodeType":"104","messageId":"105","endLine":3,"endColumn":21},{"ruleId":"102","severity":1,"message":"114","line":12,"column":5,"nodeType":"104","messageId":"105","endLine":12,"endColumn":16},{"ruleId":"102","severity":1,"message":"115","line":1,"column":30,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"116","line":1,"column":22,"nodeType":"104","messageId":"105","endLine":1,"endColumn":39},{"ruleId":"102","severity":1,"message":"117","line":1,"column":8,"nodeType":"104","messageId":"105","endLine":1,"endColumn":14},{"ruleId":"102","severity":1,"message":"118","line":23,"column":29,"nodeType":"104","messageId":"105","endLine":23,"endColumn":40},{"ruleId":"102","severity":1,"message":"119","line":28,"column":10,"nodeType":"104","messageId":"105","endLine":28,"endColumn":24},{"ruleId":"102","severity":1,"message":"120","line":42,"column":10,"nodeType":"104","messageId":"105","endLine":42,"endColumn":27},{"ruleId":"102","severity":1,"message":"121","line":1,"column":37,"nodeType":"104","messageId":"105","endLine":1,"endColumn":43},{"ruleId":"102","severity":1,"message":"122","line":1,"column":32,"nodeType":"104","messageId":"105","endLine":1,"endColumn":42},{"ruleId":"102","severity":1,"message":"112","line":1,"column":44,"nodeType":"104","messageId":"105","endLine":1,"endColumn":53},{"ruleId":"102","severity":1,"message":"123","line":16,"column":7,"nodeType":"104","messageId":"105","endLine":16,"endColumn":13},"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'useColorMode' is defined but never used.","'bg' is assigned a value but never used.","no-native-reassign",["124"],"no-negated-in-lhs",["125"],"'useEffect' is defined but never used.","'useNavigate' is defined but never used.","'OrderedList' is defined but never used.","'useRef' is defined but never used.","'useColorModeValue' is defined but never used.","'assert' is defined but never used.","'useCallback' is defined but never used.","'useCurrentUser' is defined but never used.","'useAnonymousLogin' is defined but never used.","'Method' is defined but never used.","'useContext' is defined but never used.","'colors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]